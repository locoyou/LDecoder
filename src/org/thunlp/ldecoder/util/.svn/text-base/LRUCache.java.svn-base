package org.thunlp.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Map;

@SuppressWarnings("serial")
public class LRUCache<K, V> extends LinkedHashMap<K, V> {

	private final int maxCapacity;

	private static final float DEFAULT_LOAD_FACTOR = 0.75f;

	public LRUCache(int maxCapacity) {
		super(maxCapacity, DEFAULT_LOAD_FACTOR, true);
		this.maxCapacity = maxCapacity;
	}

	@Override
	protected boolean removeEldestEntry(java.util.Map.Entry<K, V> eldest) {
		return size() > maxCapacity;
	}

	@Override
	public boolean containsKey(Object key) {
		return super.containsKey(key);
	}

	@Override
	public V get(Object key) {
		return super.get(key);
	}

	@Override
	public V put(K key, V value) {
		return super.put(key, value);
	}

	public int size() {
		return super.size();
	}

	public void clear() {
		super.clear();
	}

	public Collection<Map.Entry<K, V>> getAll() {
		return new ArrayList<Map.Entry<K, V>>(super.entrySet());
	}
}